0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.11.2
3 info using node@v0.12.6
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec { raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/home/wlanuser/d09675/wlanpub',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /root/.npm/wlanpub/0.1.2/package.tgz not in flight; packing
9 verbose tar pack [ '/root/.npm/wlanpub/0.1.2/package.tgz',
9 verbose tar pack   '/home/wlanuser/d09675/wlanpub' ]
10 verbose tarball /root/.npm/wlanpub/0.1.2/package.tgz
11 verbose folder /home/wlanuser/d09675/wlanpub
12 info prepublish wlanpub@0.1.2
13 verbose addLocalTarball adding from inside cache /root/.npm/wlanpub/0.1.2/package.tgz
14 silly cache afterAdd wlanpub@0.1.2
15 verbose afterAdd /root/.npm/wlanpub/0.1.2/package/package.json not in flight; writing
16 verbose afterAdd /root/.npm/wlanpub/0.1.2/package/package.json written
17 silly publish { name: 'wlanpub',
17 silly publish   version: '0.1.2',
17 silly publish   description: 'H3C WLAN Cloud-plat public module',
17 silly publish   main: 'wlanpub.js',
17 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
17 silly publish   keywords: [ 'wlanpub' ],
17 silly publish   repository: { type: 'git', url: 'git://github.com/JunejaTung/wlanpub.git' },
17 silly publish   homepage: 'https://github.com/JunejaTung/wlanpub',
17 silly publish   _id: 'wlanpub@0.1.2',
17 silly publish   dependencies:
17 silly publish    { amqp: '~0.2.4',
17 silly publish      uuid: '~2.0.1',
17 silly publish      redis: '~0.12.1',
17 silly publish      mongoose: '~4.1.0' },
17 silly publish   author: { name: 'Juneja' },
17 silly publish   license: 'ISC',
17 silly publish   readme: '<https://www.npmjs.com/package/wlanpub>\r\n<https://github.com/JunejaTung/wlanpub>\r\n# wlanpub - WLAN Public module for Cloud Plat.\r\n\r\n## Contents\r\n- [Synopsis](#synopsis)\r\n- [Usage](#usage)\r\n  - [Install](#install)\r\n  - [Steps](#steps)\r\n- [Mqhd](#mqhd)\r\n  - [mqhd.setHostnames(MQHostnames)](#mqhd-sethostnames-mqhostnames)\r\n  - [mqhd.getHostnames()](#mqhd-gethostnames)\r\n  - [mqhd.setSendOption(key, value)](#mqhd-getsendoption-key-value)\r\n  - [mqhd.getSendOption([key])](#mqhd-getsendoption-key)\r\n  - [mqhd.sendMsg(pkey, msg[, pubOption])](#mqhd-sendmsgp-key-msg--puboption)\r\n  - [mqhd.replyMsg(msg, deliveryInfo)](#mqhd-replymsg-msg-deliveryinfo)\r\n  - [mqhd.connectReadyForService(serviceName, recvCallback)](#mqhd-connectreadyforservice-servicename-recvcallback)\r\n  - [mqhd.connectReadyForServer(recvCallback)](#mqhd-connectreadyforserver-recvcallback)\r\n  - [mqhd.connection](#mqhd-connection)\r\n  - [mqhd.exdirect](#mqhd-exdirect)\r\n  - [mqhd.exreply](#mqhd-exreply)\r\n- [Dbhd](#dbhd)\r\n  - [dbhd.connectRedis([redisPara])](#dbhd-connectredis-redispara)\r\n  - [dbhd.connectMongoose([mongoosePara])](#dbhd-connectmongoose-mongoosepara)\r\n  - [dbhd.connectDatabase([redisPara, mongoosePara])](#dbhd-connectdatabase-redispara-mongoosepara)\r\n  - [dbhd.redisClient](#dbhd-redisclient)\r\n  - [dbhd.mongo](#dbhd-mongo)\r\n  - [dbhd.Schema](#dbhd-schema)\r\n- [Basic](#basic)\r\n  - [basic.mimeType](#basic-mimetype)\r\n  - [basic.serviceName](#basic-servicename)\r\n  - [basic.bIsValidService(serviceName)](#basic-bisvalidservice-servicename)\r\n  - [basic.getLocalIP(iftype, family)](#basic-getlocalip-iftype-family)\r\n  - [basic.mkdirsSync(dirpath, mode)](#basic-mkdirssync-dirpath-mode)\r\n  - [basic.mkdirs(dirpath, mode, callback)](#basic-mkdirs-dirpath-mode-callback)\r\n  - [basic.trimSpaces(str)](#basic-trimspaces-str)\r\n- [MQServer](#mqserver)\r\n\r\n## Synopsis\r\nwlanpub为云平台公共模块，提供一些公共属性方法，包括mqhd、basic、dbhd三个独立的子模块。    \r\nbasic实现部分常见系统调用封装，mimeType、serviceName等常量定义；    \r\nmqhd实现对RabbitMQ的基本封装，如RabbitMQ（简称MQ）的单播连接、收发操作等；    \r\ndbhd实现对数据库的访问，即提供连接数据库的操作。\r\n\r\n## Usage\r\n\r\n### Install\r\n    npm install -g wlanpub\r\n### Steps\r\n以业务端使用该库来举例，请按照以下步骤操作。     \r\n0.请首先检查将要使用的MIME type、业务名、MQServer用户名是否存在：    \r\n  查看`basic.mimeType`属性内容，确定是否需要新增MIME type；    \r\n  查看`basic.serviceName`属性内容，确定即将采用的业务名是否需要评审添加；    \r\n  若需要新增或修改任何约定属性内容，请通知负责人更新公共模块。    \r\n  MQServer用户名检查及增加流程参考后面[MQServer](https://www.npmjs.com/package/wlanpub#mqserver)节。\r\n\r\n1.加载wlanpub库：\r\n\r\n    var basic = require(\'wlanpub\').basic,\r\n        mqhd  = require(\'wlanpub\').mqhd,\r\n        dbhd  = require(\'wlanpub\').dbhd;\r\n如果只使用其中的某个子模块，单独加载该子模块即可，不用全部加载。    \r\n一些系统调用、参数常量等使用basic子模块；MQ相关属性方法可以使用mqhd子模块；数据库相关的请使用dbhd子模块。\r\n\r\n2.如果使用mqhd子模块：    \r\n  1)首先在模块入口处设置MQServer的服务器名列表，如果不设置，默认使用微软云上的环境:    \r\n\r\n    var MQHostnames = ["h3crd-wlan1", "h3crd-wlan2"];\r\n    mqhd.setHostnames(MQHostnames);\r\n  2)创建MQ连接，其中recvMqMsg为自定义的处理MQ消息的回调函数：    \r\n    mqhd.connectReadyForService(basic.serviceName.base, recvMqMsg);    \r\n  \trecvMqMsg可以参考如下实现：    \r\n  \t**请注意：如果通过MQ发送的是http消息，请务必在mq消息里定义url字段，以此来区分是否为http消息.**\r\n\r\n    function recvMqMsg(message, header, deliveryInfo) {\r\n\t    if (message.data) {\r\n\t        var recvData = JSON.parse(message.data);\r\n\t        console.log((new Date()) + \' Received mq message from %s: %s\', deliveryInfo.appId, message.data);\r\n\t        console.log(\'  deliveryInfo: \' + JSON.stringify(deliveryInfo));\r\n\t        if (recvData.url != undefined) {\r\n\t            procWsMsg(recvData, deliveryInfo);\r\n\t        }else {\r\n\t            console.warn(\'  unknown message. please check it...\');\r\n\t        }\r\n\t    }else {\r\n\t        console.warn(\'The message format is not supported, please check it where the message is send...\');\r\n\t        console.warn(\'  message: \' + JSON.stringify(message));\r\n\t        console.warn(\'  message.data: \' + message.data);\r\n\t    }\r\n    }\r\n\r\n3.如果使用dbhd子模块，请首先在模块入口处设置连接数据库参数，如果不设置，默认使用微软云上的环境：    \r\n    如果需要同时使用redis和mongoose数据库，请调用以下接口：    \r\n        dbhd.connectDatabase({\'port\':6379, \'host\':\'192.168.110.34\'}, \'mongodb://admin:admin@192.168.110.33:40000/lyytest\');    \r\n    如果只使用redis数据库，请调用以下接口：    \r\n        dbhd.connectRedis({\'port\':6379, \'host\':\'192.168.110.34\'});    \r\n    如果只使用mongoose数据库，请调用以下接口：    \r\n        dbhd.connectMongoose(\'mongodb://admin:admin@192.168.110.33:40000/lyytest\');    \r\n\r\n## Mqhd\r\n基于[postwait/node-amqp](https://www.npmjs.com/package/amqp)开源库，将创建连接、exchange和queue的创建等细节进行封装私有化，只暴露一些必要的属性和方法，比如连接、收发exchange等对象，MQ连接服务和收发消息等方法。\r\n\r\n### mqhd.setHostnames(MQHostnames)\r\n函数功能：用于设置MQServer服务器名列表。    \r\n参数介绍：`MQHostnames`为一数组对象，元素可以是主机名也可是IP地址。    \r\n默认情形：若不设置MQ服务器名参数，则*默认使用微软云上的环境即["h3crd-wlan1", "h3crd-wlan2"]*。    \r\n注意事项：若在一套云平台系统上有多个MQServer，`mqhd`的连接服务接口会尽量将各业务的连接均衡分配到各MQServer上。\r\n\r\n### mqhd.getHostnames()\r\n函数功能：用于获取当前系统所用的MQServer服务器名列表。返回MQ服务器名数组对象。\r\n\r\n### mqhd.setSendOption(key, value)\r\n函数功能：用于设置发送消息到MQ的publish选项。    \r\n参数介绍：`key`为选项名, `value`为选项`key`对应的值。key目前用到了replyTo、messageId、appId三个字段选项，其它选项参考postwait/node-amqp开源库中\r\n          [exchange.publish(routingKey, message, options, callback)](https://www.npmjs.com/package/amqp#exchangepublishroutingkey-message-options-callback)的介绍，后面提到的也一样。\r\n\r\n### mqhd.getSendOption([key])\r\n函数功能：用于获取发送消息到MQ的publish选项值。    \r\n参数介绍：`key`为选项名, 返回选项`key`对应的值。若不带参数，则将所有选项值对返回，形如{ \'replyTo\' : \'\', \'messageId\'  : \'\', \'appId\' : \'\' }。\r\n\r\n### mqhd.sendMsg(pkey, msg[, callback])\r\n函数功能：用于发送MQ消息，webserver端和业务端都可以使用该接口主动发送MQ消息。    \r\n参数介绍：`pkey`为云平台业务名。        \r\n         `msg`为发送的数据，形如：JSON.stringify(sendMsg)，且其中的sendMsg必须为JSON数据格式，且sendMsg必须包含url字段。    \r\n\t `callback`为自定义的回调函数，用来处理从MQ接收到的消息。callback的参数为jsonData,是后台业务发过来的JSON数据，具体实现示例如下。 \r\n\t    \r\n    function(jsonData) {\r\n        console.log(\'  render get msg...\');\r\n        delete jsonData.url;\r\n        res.write(JSON.stringify(jsonData));\r\n        res.end();\r\n        console.log(\'  response data: \' + JSON.stringify(jsonData));\r\n    }\r\n**注意事项：如果是webserver端调用该接口发送从http收到的消息，则callback参数必填，其它情况callback参数不必填。**\r\n\r\n### mqhd.replyMsg(msg, deliveryInfo)\r\n函数功能：用于回应消息到MQ。    \r\n参数介绍：`msg`为需要回应的消息内容, 消息内容自定义，但须形如：JSON.stringify(sendMsg)，且其中的sendMsg必须为JSON数据格式，且sendMsg必须包含url字段。   \r\n         `deliverInfo`：来源不用业务端感知，为订阅消息回调函数的第三个入参直接透传给`replyMsg`即可。    \r\n注意事项：具体详情参考接下来对`mqhd.connectReadyForService`方法的介绍。\r\n\r\n### mqhd.connectReadyForService(serviceName, recvCallback)\r\n函数功能：用于云平台业务连接MQServer并向业务队列订阅消息, 业务端需要在该回调函数中处理订阅到的消息，并通过`mqhd.replyMsg`方法应答消息。        \r\n参数介绍：`serviceName`为云平台业务名，需确保是评审过的，具体参考`basic.serviceName`属性内容。        \r\n         `recvCallback`为订阅消息的回调函数，可以参考*base*业务如下实现：    \r\n**请注意：如果通过MQ发送的是http消息，请务必在mq消息里定义url字段，以此来区分是否为http消息.**\r\n\r\n    function recvMqMsg(message, header, deliveryInfo) {\r\n        if (message.data) {\r\n            var recvData = JSON.parse(message.data);\r\n            console.log((new Date()) + \' Received mq message from %s: %s\', deliveryInfo.appId, message.data);\r\n            console.log(\'  deliveryInfo: \' + JSON.stringify(deliveryInfo));\r\n            if (recvData.url != undefined) {\r\n                procWsMsg(recvData, deliveryInfo);\r\n            }else {\r\n                console.warn(\'  unknown message. please check it...\');\r\n            }\r\n        }else {\r\n            console.warn(\'The message format is not supported, please check it where the message is send...\');\r\n            console.warn(\'  message: \' + JSON.stringify(message));\r\n            console.warn(\'  message.data: \' + message.data);\r\n        }\r\n    }\r\n\r\n### mqhd.connectReadyForServer(recvCallback)\r\n函数功能：用于webserver连接MQServer并向应答队列订阅消息, webserver端需要在该回调函数中处理订阅到的消息。    \r\n参数介绍：`recvCallback`为订阅消息的回调函数。\r\n\r\n### mqhd.connection\r\n`connection`属性为当前MQ连接对象。\r\n\r\n### mqhd.exdirect\r\n`exdirect`属性为当前webserver端发送request消息到MQ所使用的exchange对象，当然也是云平台业务接收请求消息的。\r\n\r\n### mqhd.exreply\r\n`exreply`属性为当前云平台业务端发送response消息到MQ所使用的exchange对象，当然也是webserver接收应答消息的。\r\n\r\n## Dbhd\r\n基于*redis*数据库和*mongoose*数据库进行封装。主要封装连接上述两个数据库的一些接口。\r\n\r\n### dbhd.connectRedis(redisPara)\r\n函数功能：用来连接*redis*数据库。    \r\n参数介绍：`redisPara`为连接*redis*数据库的参数。为JSON格式，形如：`{\'port\':6379, \'host\':\'192.168.110.34\'}`，其中`port`用来指定端口号，`host`用来指定数据库所在的主机名或IP地址。    \r\n默认情形：如果不携带`redisPara`参数，则默认连接到微软云上的*redis*数据库。\r\n\r\n### dbhd.connectMongoose(mongoosePara)\r\n函数功能：用来连接*mongoose*数据库。    \r\n参数介绍：`mongoosePara`为连接*mongoose*数据库的参数。为字符串格式，形如：`mongodb://admin:admin@192.168.110.33:40000/WLAN`。    \r\n默认情形：如果不携带`mongoosePara`参数，则默认连接到微软云上的*mongoose*数据库。\r\n\r\n### dbhd.connectDatabase(redisPara, mongoosePara)\r\n函数功能：用来连接*redis*数据库和*mongoose*数据库。    \r\n参数介绍：`redisPara`和`mongoosePara`分别见方法`connectRedis`和`connectMongoose`的介绍，不再赘述。    \r\n默认情形：同上。\r\n\r\n### dbhd.redisClient\r\n该属性为连接*redis*数据库的句柄对象。\r\n\r\n### dbhd.mongo\r\n该属性为连接*mongoose*数据库的句柄对象。\r\n\r\n### dbhd.Schema\r\n该属性等同于`require(\'mongoose\').Schema`，为`mongoose`的Schema句柄。**若要使用Schema请务必使用该模块暴露出的Schema属性，不要自行`require`出**。\r\n\r\n## Basic\r\n包括一些系统接口封装，如获取本机地址、创建多级目录、空格转换等；    \r\n云平台主要服务常用参数，如MIME Type、云平台业务名、MQ相关选项等常量。\r\n\r\n### basic.mimeType\r\n`mimeType`属性定义了MIME类型，具体内容参考本模块文件`wlanpub/lib/constants.js`。    \r\n该属性虽然是webserver端使用， 但**云平台业务端需要重点关注是否没有业务需要的类型**，若要新增类型，请通知公共模块负责人更新。\r\n\r\n### basic.serviceName\r\n`serviceName`属性约定了云平台业务名，具体参考云平台业务相关设计文档，该属性用处很多**云平台业务端也需要重点关注**。    \r\n  用处：`url.path`属性第一个单词，request消息的MQ队列名及routingKey，MQ服务器的用户名等。    \r\n  已经评审过的业务名名单参考本模块文件`wlanpub/lib/constants.js`。\r\n\r\n### basic.bIsValidService(serviceName)\r\n用于校验`serviceName`是否合法的即是否约定的，若不存在则需要通知公共模块负责人更新。\r\n\r\n### basic.getLocalIP(iftype, family)\r\n用于获取指定网卡类型的ipv4或ipv6地址，若指定类型有多个接口默认取第一个的地址。    \r\n  `iftype`为网卡类型，如eth, lo, tunl。    \r\n  `family`为地址协议类型，IPv4 or IPv6。    \r\n  常用方式：`basic.getLocalIP(\'eth\', \'IPv4\')`。\r\n\r\n### basic.mkdirsSync(dirpath, mode)\r\n用于同步创建多级目录，其异步版见`basic.mkdirs(dirpath, mode)`。    \r\n  `dirpath`为待创建的多级目录名。    \r\n  `mode`为目录权限设置如0775、0777。\r\n\r\n### basic.mkdirs(dirpath, mode, callback)\r\n用于异步创建多级目录，其同步版见`basic.mkdirs(dirpath, mode)`。    \r\n  `dirpath`为待创建的多级目录名。    \r\n  `mode`为目录权限设置如0755、0777。    \r\n  `callback`为创建完后的回调函数。\r\n\r\n### basic.trimSpaces(str)\r\n用于将字符串中`str`多个空格转换成一个空格，主要用于格式化行输出获取指定栏目的值。    \r\n  常用方式：`tmp = trim(stdout).split(\' \')`, 然后`tmp`是个数组对象。\r\n\r\n## MQServer\r\n连上MQServer服务器上，按以下步骤操作。    \r\n1.检查将要使用的用户名是否存在\r\n\r\n    sudo rabbitmqctl list_users\r\n2.若不存在，请新增以业务名命名的账号信息\r\n\r\n    sudo rabbitmqctl add_user serviceName 123456\r\n    sudo rabbitmqctl set_user_tags serviceName administrator\r\n    sudo rabbitmqctl set_permissions -p / serviceName ".*" ".*" ".*"\r\n也可以在MQ管理页面的首页--->Admin中操作，管理页面访问方法：MQServerIPaddr:15672。        \r\n建议采用上面的命令行方式操作。\r\n',
17 silly publish   readmeFilename: 'README.md',
17 silly publish   gitHead: '2e444cd7731c3bdc9984c84796d2c663261df4e3',
17 silly publish   bugs: { url: 'https://github.com/JunejaTung/wlanpub/issues' },
17 silly publish   _shasum: '60af19f17886423608b4d2438947c5aae5c29412',
17 silly publish   _from: '.' }
18 verbose getPublishConfig undefined
19 silly mapToRegistry name wlanpub
20 silly mapToRegistry using default registry
21 silly mapToRegistry registry https://registry.npmjs.org/
22 silly mapToRegistry uri https://registry.npmjs.org/wlanpub
23 verbose publish registryBase https://registry.npmjs.org/
24 silly publish uploading /root/.npm/wlanpub/0.1.2/package.tgz
25 verbose stack Error: auth required for publishing
25 verbose stack     at CachingRegistryClient.publish (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/publish.js:30:14)
25 verbose stack     at /usr/local/lib/node_modules/npm/lib/publish.js:134:14
25 verbose stack     at mapToRegistry (/usr/local/lib/node_modules/npm/lib/utils/map-to-registry.js:55:3)
25 verbose stack     at publish_ (/usr/local/lib/node_modules/npm/lib/publish.js:104:3)
25 verbose stack     at Array.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/slide/lib/bind-actor.js:15:8)
25 verbose stack     at LOOP (/usr/local/lib/node_modules/npm/node_modules/slide/lib/chain.js:15:14)
25 verbose stack     at LOOP (/usr/local/lib/node_modules/npm/node_modules/slide/lib/chain.js:14:28)
25 verbose stack     at chain (/usr/local/lib/node_modules/npm/node_modules/slide/lib/chain.js:20:5)
25 verbose stack     at /usr/local/lib/node_modules/npm/lib/publish.js:73:5
25 verbose stack     at RES (/usr/local/lib/node_modules/npm/node_modules/inflight/inflight.js:23:14)
26 verbose cwd /home/wlanuser/d09675/wlanpub
27 error Linux 2.6.32-504.el6.x86_64
28 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
29 error node v0.12.6
30 error npm  v2.11.2
31 error code ENEEDAUTH
32 error need auth auth required for publishing
32 error need auth You need to authorize this machine using `npm adduser`
33 verbose exit [ 1, true ]
